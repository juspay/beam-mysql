# Autogenerated from euler.yaml. Do not edit.

self: super:
let
  beam-mysql-src = super.eulerBuild.allowedPaths {
    root = ./..;
    paths = [
      ../src
      ../test
      ../db
      ../pool
      ../beam-mysql.cabal
      ../LICENSE
    ];
  };

  word24-repo = builtins.fetchTarball {
    url = "https://github.com/winterland1989/word24/archive/445f791e35ddc8098f05879dbcd07c41b115cb39.tar.gz";
    sha256 = "19xm3w8f7kyr6g5rhnywis2piwjzc4wjfspsjrp91qq99gbx4zjb";
  };
  word24-path = word24-repo;

  isDarwin = super.stdenv.isDarwin;
linuxBuildTools = with super; lib.optionals (!isDarwin) [ mysql80 numactl ];
dontCheckDarwin =
  if isDarwin then super.haskell.lib.dontCheck else x: x;
in
super.eulerBuild.mkEulerHaskellOverlay self super
  (hself: hsuper: {
    word24 = self.eulerBuild.fastBuildExternal {
      drv = super.haskell.lib.unmarkBroken (hself.callCabal2nix "word24" word24-path { });
    };
    wire-streams = self.eulerBuild.fastBuildExternal {
      drv = self.haskell.lib.doJailbreak (super.haskell.lib.unmarkBroken (hsuper.wire-streams));
    };
    binary-parsers = self.eulerBuild.fastBuildExternal {
      drv = self.haskell.lib.doJailbreak (super.haskell.lib.unmarkBroken (hsuper.binary-parsers));
    };
    mysql-haskell = self.eulerBuild.fastBuildExternal {
      drv = self.haskell.lib.doJailbreak (super.haskell.lib.unmarkBroken (hsuper.mysql-haskell));
    };
    
    beam-mysql = dontCheckDarwin (super.haskell.lib.addBuildTools (self.eulerBuild.fastBuild {
      drv = super.haskell.lib.addBuildTools (hself.callCabal2nix "beam-mysql" beam-mysql-src { }) (with self; [ coreutils zlib ]);
      overrides = {
        # We want to run tests for our packages most of the time
        runTests = true;
      };
    }) linuxBuildTools);
  })
